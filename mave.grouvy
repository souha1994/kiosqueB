#!/usr/bin/env groovy

def call() {

    properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '5']]])

    node {
        checkout scm
        appVersion = pomXml('version')
        appName = pomXml('name')
        appKey = pomXml('artifactId')
        currentBuild.displayName = "${env.BRANCH_NAME}-${appVersion}-${env.BUILD_NUMBER}"
    }

    pipeline {
        agent { label 'master' }
        tools { 
            maven 'Maven 3.6.3' 
            jdk 'Java 11' 
        }

        stages {
            stage('Build') {
                
                when {
                    beforeInput true
                    beforeAgent true
                    anyOf {
                        branch '*-merge'
                        branch 'master'
                    }
                }
                
                steps {
                    mvnCommand 'clean package -DskipTests'
                }
            }
            stage('Unit Test') {
                when {
                    beforeInput true
                    beforeAgent true
                    anyOf {
                        branch '*-merge'
                        branch 'master'
                    }
                }
                steps {
                    mvnCommand 'jacoco:prepare-agent@prepare-ut-agent surefire:test -Pdev'
                }
                post {
                    always {
                        junit allowEmptyResults: true, testResults:'target/surefire-reports/*.xml'
                    }
                }
            }

            /*stage('Dependency check') {
                agent { label 'master' }
                when { branch 'master' }
                steps {
                    sh '/opt/dependency-check/bin/dependency-check.sh' +
                            ' --disableNuspec --disableNugetconf --disableAssembly' +
                            ' --proxyserver 10.154.227.90 --proxyport 3128' +
                            ' --disableCentral --noupdate --cveValidForHours 24' +
                            ' --scan ./ --format "XML" --project scan' +
                            ' --out target/dependency-check-report.xml'
                    sh 'pwd'
                    dependencyCheckPublisher pattern: "target/dependency-check-report.xml"
                }
            }*/
                
            stage('SonarQube') {
                    environment {
                        appVersion = pomXml('version')
                        appName = pomXml('name')
                    }
                    
                    when {
                        branch 'master'
                    }
                    
                    steps {
                        sh 'mkdir -p target/jacoco-reports/'
                        sh 'ls -l target/jacoco-reports/'
                        mvnCommand 'verify -DskipTests' +
                                ' sonar:sonar' +
                                ' -Dsonar.host.url=http://10.154.7.4:9000/sonar/' +
                                ' -Dsonar.login=1d9313b0e4142118aa84858b1733caf248a665d4' +
                                ' -Dsonar.sourceEncoding=UTF-8' +
                                ' -Dsonar.java.binaries=target' +
                                " -Dsonar.projectName='${appName}'" +
                                " -Dsonar.projectVersion=${appVersion}" +
                                " -Dsonar.branch.name=${env.GIT_BRANCH}" +
                                " -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-reports/jacoco.xml"
                    }
                }
                stage('SonarQube diff') {
                    when {
                        beforeInput true
                        beforeAgent true
                        branch '*-merge'
                    }
                    steps {
                        mvnCommand 'sonar:sonar' +
                                ' -Dsonar.host.url=http://10.154.7.4:9000/sonar/' +
                                ' -Dsonar.login=1d9313b0e4142118aa84858b1733caf248a665d4' +
                                ' -Dsonar.sourceEncoding=UTF-8' +
                                ' -Dsonar.java.binaries=target' +
                                " -Dsonar.branch.name=${env.GIT_BRANCH}" +
                                ' -Dsonar.branch.target=master' +
                                " -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-reports/jacoco.xml"
                    }
                }
            stage('Artifactory snapshot') {
                when {
                    beforeInput true
                    beforeAgent true
                    branch 'master'
                }
                steps {
                    mvnCommand 'deploy -DskipTests -Pdev' +
                            ' -DaltDeploymentRepository=artifactory::default::http://10.154.7.4:8081/artifactory/snapshots'
                }
            }
            stage('Release') {
                stages {
                    stage('Release version') {
                        when {
                            beforeInput true
                            beforeAgent true
                            branch '*stable'
                        }
                        options {
                            timeout(time: 1, unit: 'HOURS')
                        }
                        input {
                            message "Should we release this version?"
                            ok "Yes, we should."
                            parameters {
                                string(name: 'APP_VERSION', defaultValue: '1.0.0', description: 'Target version')
                            }
                        }
                        steps {
                            sh 'git config --global user.email "sa-jenkins-ci@soprasteria.com"'
                            sh 'git config --global user.name "SA jenkins"'
                            sh 'git config http.sslVerify false'
                            sh 'git config --global credential.helper store'
                            withCredentials([usernamePassword(credentialsId: 'Jenkins-ci-on-gitlab-aife', passwordVariable: 'pass', usernameVariable: 'user')]) {
                                sh "echo https://${user}:${pass}@ifelinfe4849.aife.local > ~/.git-credentials"
                            }
        
                            sh 'whoami'
                            sh 'rm -rf m2-settings.xml'
                            sh "git checkout ${env.GIT_BRANCH}"
                            mvnCommand "versions:set -DnewVersion=${APP_VERSION} -DgenerateBackupPoms=false"
                            mvnCommand 'test'
                            mvnCommand 'sonar:sonar' +
                                    ' -Dsonar.host.url=http://10.154.7.4:9000/sonar/' +
                                    ' -Dsonar.login=1d9313b0e4142118aa84858b1733caf248a665d4' +
                                    ' -Dsonar.sourceEncoding=UTF-8' +
                                    " -Dsonar.branch.name=${env.GIT_BRANCH}"
                            sh 'git pull'
                            sh 'git commit -am "Update pom.xml version [ci skip]"'
                            sh "git push origin ${env.GIT_BRANCH}"
                            sh "git tag v${APP_VERSION}"
                            sh 'git push origin --tags'
                            mvnCommand 'deploy -DskipTests ' +
                                    ' -DaltDeploymentRepository=artifactory::default::http://10.154.7.4:8081/artifactory/releases'
                        }
                    }

                }
            }
        }
    }
}

private Object pomXml(String item) {
    def matcher = readFile('pom.xml') =~ "<${item}>(.+)</${item}>"
    return matcher ? matcher[0][1] : null
}

private void mvnCommand(String commandLine) {
    writeFile file: "m2-settings.xml", text: '''<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                    https://maven.apache.org/xsd/settings-1.0.0.xsd">
<proxies>
  <proxy>
      <id>proxy</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>10.154.227.90</host>
      <port>3128</port>
      <nonProxyHosts>127.0.0.1|localhost|10.154.7.4|*.aife.local</nonProxyHosts>
    </proxy>
  </proxies>
  <servers>
    <server>
      <id>artifactory</id>
      <username>admin</username>
      <password>AIFEEJ2020</password>
    </server>
    <server>
      <id>ej-libs-external</id>
      <username>admin</username>
      <password>AIFEEJ2020</password>
    </server>
    <server>
      <id>ej-release-local</id>
      <username>admin</username>
      <password>AIFEEJ2020</password>
    </server>
  </servers>
</settings>
'''
    sh 'mvn -s m2-settings.xml -B ' + commandLine
}


