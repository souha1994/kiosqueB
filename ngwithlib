#!/usr/bin/env groovy

def call() {

    properties([[$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '5']]])

    pipeline {
        agent { label 'master'}
        environment {
            http_proxy = "http://10.154.227.90:3128"
            https_proxy = "http://10.154.227.90:3128"
            no_proxy = "127.0.0.1,localhost,10.0.0.0/24,.aife.local"
            APP_NAME = readPackageJson('.name')
            APP_GROUP = readPackageJson('.group')
            APP_VERSION = readPackageJson('.version')
            APP_PORT = readDeployProperties('port', 'dev')
            APP_DEP = readPackageJson('.appDependencies')
            CHROME_BIN="/usr/bin/chromium-browser"
        }
        tools {
            nodejs 'Node 12.14.1'
        }
        stages {
            stage('Build') {
                when {
                    beforeInput true
                    beforeAgent true
                    anyOf {
                        branch '*-merge'
                        branch 'master'
                    }
                }
                steps {
                    sh 'rm -rf dist'
                    sh 'rm -f ./package-lock.json'

                    sh 'npm install'

                    //link des libs
                    script{
                        if(env.APP_DEP != null && env.APP_DEP != "" && env.APP_DEP != "null"){
                            for(String dep in env.APP_DEP.split(",")){
                                sh "npm link $dep"
                            }
                        }
                    }
                    
                    sh './node_modules/@angular/cli/bin/ng build --prod'
                    
                    sh 'rm -rf dist/*.tar.gz'
                    dir("dist") {
                        sh "tar -zcvf ${env.APP_NAME}-${env.APP_VERSION}-SNAPSHOT.tar.gz *"
                    }
                }
            }
            stage('test') {
                when {
                    beforeInput true
                    beforeAgent true
                    anyOf {
                        branch '*-merge'
                        branch 'master'
                    }
                }
                steps {
                    sh 'npm run jenkins'
                }
            }

            stage('Nettoyage Node Modules') {
                when {
                    beforeInput true
                    beforeAgent true
                    anyOf {
                        branch '*-merge'
                    }
                }
                steps {
                    sh 'rm -rf dist'
                    sh 'rm -rf node_modules'
                }
            }

            stage('Sonarqube') {
                when {
                        branch 'master'
                }
                environment {
                    scannerHome = tool 'SonarQubeScanner'
                }
                steps {
                    withSonarQubeEnv('Sonar') {
                        sh "${scannerHome}/bin/sonar-scanner -X " +
                                        "-Dsonar.analysis.mode=publish"
                    
                    /*timeout(time: 10, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }*/
                    }
                }
            }
            stage('SonarQube diff') {
                    when {
                        beforeInput true
                        beforeAgent true
                        branch '*-merge'
                    }
                    environment {
                        scannerHome = tool 'SonarQubeScanner'
                    }
                    steps {
                        withSonarQubeEnv('Sonar') {
                            script{
                                sh "git checkout package-lock.json"
                                sh "git reset --hard HEAD^"
                                def commits = sh(script: "git log --pretty=format:%H origin/master..", returnStdout: true).replaceAll('\n', ',')
                                
                                sh "${scannerHome}/bin/sonar-scanner -X -Dsonar.sources=sonar-project.properties -Dsonar.gitlab.commit_sha=${commits} -Dsonar.gitlab.ref_name=${env.GIT_BRANCH} -Dsonar.branch.name=${env.GIT_BRANCH} -Dsonar.branch.target=master"
                            }
                        }
                        /*timeout(time: 10, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }*/
                   }
                }

            stage('Deployment') {
                when {
                    beforeInput true
                    beforeAgent true
                    branch 'master'
                }
                steps {
                    ansibleAngular('dev', 'ifelinfe4851.aife.local')
                }
            }
            stage('Artifactory snapshot') {
                when {
                    beforeInput true
                    beforeAgent true
                    branch 'master'
                }
                steps {
                    sh "curl -X PUT -uadmin:AIFEEJ2020 -T dist/${env.APP_NAME}-${env.APP_VERSION}-SNAPSHOT.tar.gz \"http://ifelinfe4850.aife.local:8081/artifactory/snapshots/${env.APP_GROUP}/${env.APP_NAME}/${env.APP_NAME}-${env.APP_VERSION}-SNAPSHOT.tar.gz\""
                }
            }
            stage('Release') {
                stages {
                    stage('Release version') {
                        when {
                            beforeInput true
                            beforeAgent true
                            branch '*stable'
                        }
                        environment {
                            PUPPETEER_SKIP_CHROMIUM_DOWNLOAD = true
                        }
                        options {
                            timeout(time: 1, unit: 'HOURS')
                        }
                        input {
                            message "Should we release this version?"
                            ok "Yes, we should."
                            parameters {
                                string(name: 'APP_VERSION', defaultValue: '1.0.0', description: 'Target version')
                            }
                        }
                        steps {
                            sh 'git config --global user.email "sa-jenkins-ci@soprasteria.com"'
                            sh 'git config --global user.name "SA jenkins"'
                            sh 'git config http.sslVerify false'
                            sh 'git config --global credential.helper store'
                            withCredentials([usernamePassword(credentialsId: 'Jenkins-ci-on-gitlab-aife', passwordVariable: 'pass', usernameVariable: 'user')]) {
                                sh "echo https://${user}:${pass}@ifelinfe4849.aife.local > ~/.git-credentials"
                            }
                            sh "git checkout ${env.GIT_BRANCH}"
        
                            // npm set version
                            sh "npm version ${APP_VERSION} --allow-same-version --no-git-tag-version"
        
                            // npm build
                            sh 'rm ./package-lock.json'
                            sh 'npm install'
                            sh './node_modules/@angular/cli/bin/ng build --prod --aot'
        
                            sh 'git commit -am "Update package.json version [ci skip]"'
                            sh "git push origin ${env.GIT_BRANCH}"
                            sh "git tag v${APP_VERSION}"
                            sh 'git push origin --tags'
        
                            sh 'rm -rf dist/*.tar.gz'
        
                            // Push to Artifactory
                            dir('dist') {
                                sh "tar -zcvf ${env.APP_NAME}-${env.APP_VERSION}.tar.gz *"
                            }
                            sh 'pwd'
                            sh "curl -uadmin:AIFEEJ2020 -T dist/${env.APP_NAME}-${env.APP_VERSION}.tar.gz \"http://ifelinfe4850.aife.local:8081/artifactory/raws/releases/${env.APP_GROUP}/${env.APP_NAME}-${env.APP_VERSION}.tar.gz\""
                        }
                    }
                    stage('Ansible Deployment') {
                        when {
                            beforeInput true
                            beforeAgent true
                            branch '*stable'
                        }
                        steps {
                            ansibleAngular('rec', 'ifelinfe4856.aife.local')
                        }
                    }
                }
            }
        }
    }
}

private String readPackageJson(String jsonQuery) {
    return sh(
            script: "cat package.json | jq -r \"${jsonQuery}\"",
            returnStdout: true,
    ).replaceAll("\n","")
}

private String readDeployProperties(String properties, String envName) {
    return sh(
            script: "cat deploy.properties | grep ${properties}-${envName} | cut -d':' -f2",
            returnStdout: true,
    ).replaceAll("\n","")
}


private void ansibleAngular(String envName, String targetVm) {
    // Write ansible.cfg
    writeFile file: "ansible-playbooks/ansible.cfg", text: '''[defaults]
remote_tmp     = /tmp/remote
local_tmp      = /tmp/local
stdout_callback = debug
host_key_checking = False'''

    // Checkout role ansible-springboot
    dir('ansible-playbooks/ansible-angular') {
        sh 'git config --global http.sslVerify false'
        git branch: 'master', credentialsId: 'Jenkins-ci-on-gitlab-aife', url: 'https://ifelinfe4849.aife.local/aife/cicd/ansible-roles/ansible-angular.git'
    }

    // Write ansible playbook using ansible-springboot role
    writeFile file: "ansible-playbooks/angular.yml", text: """---
- name: Deploy
  hosts: all
  become: yes
  roles:
    - role: ansible-angular
      app_name: ${env.APP_NAME}
      vhost_server_name: ${env.APP_NAME}-$envName
      vhost_server_port: ${env.APP_PORT}
      angular_src_file: ${env.APP_NAME}.tar.gz"""
      
    // Write host file
    writeFile file: "ansible-playbooks/hosts.ini", text: """[all:vars]
ansible_user=ansible

[all]
${targetVm}"""

    // Copy jar and application.yml files
    sh "mkdir -p ansible-playbooks/files ansible-playbooks/templates"
    sh "cp dist/${env.APP_NAME}-*.tar.gz ansible-playbooks/files/${env.APP_NAME}.tar.gz"

    withEnv(["ANSIBLE_CONFIG=ansible-playbooks/ansible.cfg"]) {
        ansiColor('xterm') {
            ansiblePlaybook(
                    credentialsId: 'ansible_id_rsa',
                    inventory: 'ansible-playbooks/hosts.ini',
                    playbook: 'ansible-playbooks/angular.yml',
                    colorized: true,
                    extras: '-vv'
            )
        }
    }
}

